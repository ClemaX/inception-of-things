require File.join(File.dirname(__FILE__), "..", "lib", "Provisioner")

VAGRANTFILE_API_VERSION = "2"

VM_NAME="#{ENV['USER']}"

VM_RAM_MB=1024
VM_CPUS=2

VM_SUFFIX_SERVER="S"
VM_SUFFIX_AGENT="SW"

VM_SHARE_PATH="shared"
VM_SHARE_MOUNTPOINT="/mnt/shared"

VM_PROVISION_K3S = "scripts/k3s.sh"
VM_PROVISION_K3S_TOKEN_GET = "scripts/k3s-token-get.sh"

VM_IP_SUBNET="192.168.56"
VM_IP_HOSTID_BASE=110

K3S_SERVER_IP_INTERNAL="#{VM_IP_SUBNET}.#{VM_IP_HOSTID_BASE}"

def provision_server(node, config)
	# Update K3S Server token after `provision` and `up`
	config.trigger.after [:provision, :up] do |trigger|
		trigger.name = "update shared token"
		trigger.run_remote = {
			path: VM_PROVISION_K3S_TOKEN_GET,
			args: ["#{VM_SHARE_MOUNTPOINT}/token"]
		}
	end

	# Share K3S Server token directory with Server
	config.vm.synced_folder "#{VM_SHARE_PATH}/", "#{VM_SHARE_MOUNTPOINT}/", create: true

	# Install K3S Server
	config.vm.provision "shell",
		path: VM_PROVISION_K3S,
		args: ["--node-ip", node[:ip]]
end

def provision_agent(node, config)
	# Share K3S Server token directory with Agent
	config.vm.synced_folder "#{VM_SHARE_PATH}/", "#{VM_SHARE_MOUNTPOINT}/", create: true

	# Install K3S Agent
	config.vm.provision "shell",
		env: {
			:K3S_URL => "https://#{K3S_SERVER_IP_INTERNAL}:6443",
			:K3S_TOKEN_FILE => "#{VM_SHARE_MOUNTPOINT}/token"
		},
		path: VM_PROVISION_K3S,
		args: ["--node-ip", node[:ip]]
end

nodes = [
	{
		type: "server",
		name: "#{VM_NAME}#{VM_SUFFIX_SERVER}",
	},
	{
		type: "agent",
		name: "#{VM_NAME}#{VM_SUFFIX_AGENT}",
	},
]

provisioner = Provisioner.new(VM_IP_SUBNET, VM_IP_HOSTID_BASE)

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	config.vm.box = "generic/alpine318"
        config.vm.provider "virtualbox" do |domain|
          domain.memory = VM_RAM_MB
          domain.cpus = VM_CPUS
        end

	provisioner.provision nodes, config
end
